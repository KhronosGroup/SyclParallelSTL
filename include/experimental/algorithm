/* Copyright (c) 2015 The Khronos Group Inc.

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and/or associated documentation files (the
  "Materials"), to deal in the Materials without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Materials, and to
  permit persons to whom the Materials are furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be included
  in all copies or substantial portions of the Materials.

  MODIFICATIONS TO THIS FILE MAY MEAN IT NO LONGER ACCURATELY REFLECTS
  KHRONOS STANDARDS. THE UNMODIFIED, NORMATIVE VERSIONS OF KHRONOS
  SPECIFICATIONS AND HEADER INFORMATION ARE LOCATED AT
     https://www.khronos.org/registry/

  THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
*/

#ifndef __EXPERIMENTAL_PARALLEL_ALGORITHM__
#define __EXPERIMENTAL_PARALLEL_ALGORITHM__

#include <type_traits>
#include <typeinfo>
#include <algorithm>
#include <iostream>


// Workaround for travis builds,
// disable old C99 macros
#undef isfinite
#undef isnan
#undef isnormal
#undef isinf
#undef signbit
#undef isgreater
#undef isless
#undef islessequal
#undef isunordered
#undef isgreaterequal


namespace std {
namespace experimental {
namespace parallel {

/** reduce
 * @brief Function that sorts the given range
 * @param exec  : Execution Policy
 * @param first : Start of the range
 * @param last  : End of the range
 */
template <class ExecutionPolicy, class InputIterator>
typename iterator_traits<InputIterator>::value_type reduce(
    ExecutionPolicy &&exec, InputIterator first, InputIterator last) {
  return exec.reduce(first, last);
}

/** reduce
 * @brief Function that sorts the given range
 * @param exec  : Execution Policy
 * @param first : Start of the range
 * @param last  : End of the range
 * @param init  : Initial value
 */
template <class ExecutionPolicy, class InputIterator, class T>
T reduce(ExecutionPolicy &&exec, InputIterator first, InputIterator last,
         T init) {
  return exec.reduce(first, last, init);
}

/** reduce
 * @brief Function that sorts the given range
 * @param exec   : Execution Policy
 * @param first  : Start of the range
 * @param last   : End of the range
 * @param init   : Initial value
 * @param binop  : Binary operator
 */
template <class ExecutionPolicy, class InputIterator, class T,
          class BinaryOperation>
T reduce(ExecutionPolicy &&exec, InputIterator first, InputIterator last,
         T init, BinaryOperation binop) {
  return exec.reduce(first, last, init, binop);
}

/** sort
 * @brief Function that sorts the given range
 * @param sep   : Execution Policy
 * @param first : Start of the range
 * @param last  : End of the range
 */
template <class ExecutionPolicy, class RandomAccessIterator>
void sort(ExecutionPolicy &&sep, RandomAccessIterator b,
          RandomAccessIterator e) {
  sep.sort(b, e);
}

/** sort
 * @brief Function that takes a Comp Operator and applies it to the given range
 * @param sep   : Execution Policy
 * @param first : Start of the range
 * @param last  : End of the range
 * @param comp  : Comp Operator
 */
template <class ExecutionPolicy, class RandomIt, class Compare>
void sort(ExecutionPolicy &&sep, RandomIt first, RandomIt last, Compare comp) {
  sep.sort(first, last, comp);
}

/** transform
 * @brief Function that takes a Unary Operator and applies to the given range
 * @param sep : Execution Policy
 * @param b   : Start of the range
 * @param e   : End of the range
 * @param out : Output iterator
 * @param op  : Unary Operator
 * @return  An iterator pointing to the last element
 */
template <class ExecutionPolicy, class Iterator, class OutputIterator,
          class UnaryOperation>
OutputIterator transform(ExecutionPolicy &&sep, Iterator b, Iterator e,
                         OutputIterator out, UnaryOperation op) {
  return sep.transform(b, e, out, op);
}

/** transform
 * @brief Function that takes a Binary Operator and applies to the given range
 * @param sep    : Execution Policy
 * @param first1 : Start of the range of buffer 1
 * @param last1  : End of the range of buffer 1
 * @param first2 : Start of the range of buffer 2
 * @param result : Output iterator
 * @param op     : Binary Operator
 * @return  An iterator pointing to the last element
 */
template <class ExecutionPolicy, class InputIt1, class InputIt2, class OutputIt,
          class BinaryOperation>
OutputIt transform(ExecutionPolicy &&sep, InputIt1 first1, InputIt1 last1,
                   InputIt2 first2, OutputIt result, BinaryOperation op) {
  return sep.transform(first1, last1, first2, result, op);
}

/* for_each
 */
template <class ExecutionPolicy, class Iterator, class UnaryFunction>
void for_each(ExecutionPolicy &&sep, Iterator b, Iterator e, UnaryFunction f) {
  sep.for_each(b, e, f);
}

/* for_each_n.
 * @brief Applies a Function across the range [first, first + n).
 * Implementation of the sequential version.
 * According to  ParallelismTS version n4507. Section 4.3.2
 * @param InputIterator first : Start of the range via a forward iterator
 * @param Size n : Specifies the number of valid elements
 * @param Function  f : No restrictions
 */
template <class InputIterator, class Size, class Function>
InputIterator for_each_n(InputIterator first, Size n, Function f) {
  if (n > 0) {
    InputIterator last(first + n);
    std::for_each(first, last, f);
    return last;
  } else {
    return first;
  }
}

/* for_each_n.
* @brief Applies a Function across the range [first, first + n).
* Implementation of the command group that submits a for_each_n kernel,
* According to Parallelism TS version n4507. Section 4.3.2
*/
template <class ExecutionPolicy, class InputIterator, class Size,
          class Function>
InputIterator for_each_n(ExecutionPolicy &&exec, InputIterator first, Size n,
                         Function f) {
  return exec.for_each_n(first, n, f);
}

/* inner_product.
* @brief Returns the inner product of two vectors across the range [first1,
* last1). Implementation of the command group that submits an inner_product
* kernel.
*/
template <class ExecutionPolicy, class InputIt1, class InputIt2, class T>
T inner_product(ExecutionPolicy &&exec, InputIt1 first1, InputIt1 last1,
                InputIt2 first2, T value) {
  return exec.inner_product(first1, last1, first2, value);
}

/* inner_product.
* @brief Returns the inner product of two vectors across the range [first1,
* last1) by applying Functions op1 and op2. Implementation of the command group
* that submits an inner_product kernel.
*/
template <class ExecutionPolicy, class InputIt1, class InputIt2, class T,
          class BinaryOperation1, class BinaryOperation2>
T inner_product(ExecutionPolicy &&exec, InputIt1 first1, InputIt1 last1,
                InputIt2 first2, T value, BinaryOperation1 op1,
                BinaryOperation2 op2) {
  return exec.inner_product(first1, last1, first2, value, op1, op2);
}

/* transform_reduce.
* @brief Returns the transform_reduce of one vector across the range [first1,
* last1) by applying Functions op1 and op2. Implementation of the command group
* that submits a transform_reduce kernel.
*/
template <class ExecutionPolicy, class InputIterator, class UnaryOperation,
          class T, class BinaryOperation>
T transform_reduce(ExecutionPolicy &&exec, InputIterator first,
                   InputIterator last, UnaryOperation unary_op, T init,
                   BinaryOperation binary_op) {
  return exec.transform_reduce(first, last, unary_op, init, binary_op);
}

/* count.
 * @brief Returns the number of elements in the range ``[first, last)``
 * that are equal to ``value``. Implementation of the command group
 * that submits a ``count_if`` kernel.
 * @tparam ForwardIt must meet the requirements of ForwardIterator
 * @param exec the execution policy to use
 * @param first,last the range of elements to examine
 * @param value the value to search for
 * @return number of elements satisfying the condition
 */
template <class ExecutionPolicy, class ForwardIt, class T>
typename iterator_traits<ForwardIt>::difference_type count(
    ExecutionPolicy &&exec, ForwardIt first, ForwardIt last, T value) {
  return exec.count(first, last, value);
}

/* count_if.
* @brief Returns the count_if of one vector across the range [first,
* last) by applying UnaryPredicate p. Implementation of the command group
* that submits a count_if kernel.
*/
template <class ExecutionPolicy, class InputIt, class UnaryPredicate>
typename iterator_traits<InputIt>::difference_type count_if(
    ExecutionPolicy &&exec, InputIt first, InputIt last, UnaryPredicate p) {
  return exec.count_if(first, last, p);
}

/** exclusive_scan.
 * @brief Calculates the exclusive scan of the given vector, across the range
 * [first, last) and the initial value T init.
 */
template <class ExecutionPolicy, class InputIterator, class OutputIterator,
          class T>
OutputIterator exclusive_scan(ExecutionPolicy &&exec, InputIterator first,
                              InputIterator last, OutputIterator output,
                              T init) {
  return exec.exclusive_scan(first, last, output, init);
}

/** exclusive_scan.
 * @brief Calculates the exclusive scan of the given vector, across the range
 * [first, last) and the initial value T init by applying BinaryOperation bop
 */
template <class ExecutionPolicy, class InputIterator, class OutputIterator,
          class T, class BinaryOperation>
OutputIterator exclusive_scan(ExecutionPolicy &&exec, InputIterator first,
                              InputIterator last, OutputIterator output, T init,
                              BinaryOperation bop) {
  return exec.exclusive_scan(first, last, output, init, bop);
}

/** inclusive_scan.
 * @brief Calculates the inclusive scan of the given vector, across the range
 * [first, last) by applying a default addition operator.
 */
template <class ExecutionPolicy, class InputIterator, class OutputIterator>
OutputIterator inclusive_scan(ExecutionPolicy &&exec, InputIterator first,
                              InputIterator last, OutputIterator out) {
  return exec.inclusive_scan(first, last, out);
}

/** inclusive_scan.
 * @brief Calculates the inclusive scan of the given vector, across the range
 * [first, last) by applying the BinaryOperation bop.
 */
template <class ExecutionPolicy, class InputIterator, class OutputIterator,
          class BinaryOperation>
OutputIterator inclusive_scan(ExecutionPolicy &&exec, InputIterator first,
                              InputIterator last, OutputIterator out,
                              BinaryOperation bop) {
  return exec.inclusive_scan(first, last, out, bop);
}

/** inclusive_scan.
 * @brief Calculates the inclusive scan of the given vector, across the range
 * [first, last) and an initial value init by applying the BinaryOperation bop.
 */
template <class ExecutionPolicy, class InputIterator, class OutputIterator,
          class BinaryOperation, class T>
OutputIterator inclusive_scan(ExecutionPolicy &&exec, InputIterator first,
                              InputIterator last, OutputIterator out,
                              BinaryOperation bop, T init) {
  return exec.inclusive_scan(first, last, out, bop, init);
}

/** find.
 * @brief Returns an iterator to the first position at which value can be found
 * in the range [first, last)
 */
template <class ExecutionPolicy, class InputIt, class T>
InputIt find(ExecutionPolicy &&exec, InputIt first, InputIt last, T value) {
  return exec.find(first, last, value);
}

/** find_if.
 * @brief Returns an iterator to the first position at which the predicate p
 * is true in the range [first, last)
 */
template <class ExecutionPolicy, class InputIt, class UnaryPredicate>
InputIt find_if(ExecutionPolicy &&exec, InputIt first, InputIt last,
                UnaryPredicate p) {
  return exec.find_if(first, last, p);
}

/** find_if_not.
 * @brief Returns an iterator to the first position at which the predicate p
 * is false in the range [first, last)
 */
template <class ExecutionPolicy, class InputIt, class UnaryPredicate>
InputIt find_if_not(ExecutionPolicy &&exec, InputIt first, InputIt last,
                    UnaryPredicate p) {
  return exec.find_if_not(first, last, p);
}

/** fill.
* @brief Fills the range specified by [first, last) with the value given in
* value. Implementation of the command group that submits a fill kernel.
*/
template <class ExecutionPolicy, class ForwardIt, class T>
void fill(ExecutionPolicy &&exec, ForwardIt first, ForwardIt last,
          const T &value) {
  return exec.fill(first, last, value);
}

/** fill_n.
 * @brief Fills the range specified by ``[first, first + count)`` with the value
 * given in
 * ``value`` if ``count > 0``. Does nothing otherwise. Implementation of the
 * command
 * group that submits a fill kernel.
 * @tparam ForwardIt must meet the requirements of ForwardIterator
 * @param exec the execution policy to use
 * @param first the beginning of the range of elements to modify
 * @param count number of elements to modify
 * @param value the value to be assigned
 */
template <class ExecutionPolicy, class ForwardIt, class Size, class T>
void fill_n(ExecutionPolicy &&exec, ForwardIt first, Size count,
            const T &value) {
  return exec.fill_n(first, count, value);
}

/** generate.
 * @brief Assigns each element in range ``[first, last)`` a value generated by
 * the
 * given function object ``g``.
 * @tparam ForwardIt must meet the requirements of ForwardIterator
 * @param exec the execution policy to use
 * @param first,last the range of elements to generate
 * @param g generator function object that will be called
 */
template <class ExecutionPolicy, class ForwardIt, class Generator>
void generate(ExecutionPolicy &&exec, ForwardIt first, ForwardIt last,
              Generator g) {
  return exec.generate(first, last, g);
}

/** generate_n.
 * @brief Assigns values, generated by given function object g, to the first
 * count elements in the range beginning at first, if count > 0. Does nothing
 * otherwise.
 * @tparam ForwardIt must meet the requirements of ForwardIterator
 * @param exec the execution policy to use
 * @param first the beginning of the range of elements to generate
 * @param count number of the elements to generate
 * @param g generator function object that will be called
 */
template <class ExecutionPolicy, class ForwardIt, class Size, class Generator>
void generate_n(ExecutionPolicy &&exec, ForwardIt first, Size count,
                Generator g) {
  return exec.generate_n(first, count, g);
}

/** reverse
 * @brief Reverses the order of the elements in the range ``[first,last)``.
 * The function calls ``swap`` to swap the elements to their new locations.
 * @tparam BidirIt must meet the requirements of ValueSwappable and BidirectionalIterator
 * @param exec the execution policy to use
 * @param first,last the range of elements to reverse
 */
template <class ExecutionPolicy, class BidirIt>
void reverse(ExecutionPolicy &&exec, BidirIt first, BidirIt last) {
  return exec.reverse(first, last);
}

/** reverse_copy
 * @brief Copies the elements from the range [first, last) to another range
 * beginning at d_first in such a way that the elements in the new range are in
 * reverse order.
 * @tparam BidirIt must meet the requirements of BidirectionalIterator
 * @tparam ForwardIt must meet the requirements of ForwardIterator
 * @param exec the execution policy to use
 * @param first,last the range of elements to copy
 * @param d_first the beginning of the destination range
 * @return Output iterator to the element past the last element copied
 */
template <class ExecutionPolicy, class BidirIt, class ForwardIt>
ForwardIt reverse_copy(ExecutionPolicy &&exec, BidirIt first, BidirIt last,
                       ForwardIt d_first) {
  return exec.reverse_copy(first, last, d_first);
}

/** replace_if
 * @brief  Replaces all elements for which predicate ``p`` returns ``true``
 * with ``new_value`` in the range ``[first, last)``.
 * @tparam ForwardIt must meet the requirements of ForwardIterator
 * @tparam UnaryPredicate must meet the requirements of Predicate
 * @param exec the execution policy to use
 * @param first,last the range of elements to process
 * @param p unary predicate which returns ``true`` if the element value should
 * be replaced
 * @param new_value the value to use as replacement
 */
template <class ExecutionPolicy, class ForwardIt, class UnaryPredicate, class T>
void replace_if(ExecutionPolicy &&exec, ForwardIt first, ForwardIt last,
                UnaryPredicate p, const T &new_value) {
  return exec.replace_if(first, last, p, new_value);
}

/** replace
 * @brief  Replaces all elements that are equal to ``old_value`` with
 * ``new_value`` in the range ``[first, last)``.
 * @tparam ForwardIt must meet the requirements of ForwardIterator
 * @param exec the execution policy to use
 * @param first,last the range of elements to process
 * @param old_value the value of elements to replace
 * @param new_value the value to use as replacement
 */
template <class ExecutionPolicy, class ForwardIt, class T>
void replace(ExecutionPolicy &&exec, ForwardIt first, ForwardIt last,
             const T &old_value, const T &new_value) {
  return exec.replace(first, last, old_value, new_value);
}

/** replace_copy_if
 * @brief Copies the all elements from the range ``[first, last)`` to another
 * range beginning at ``d_first`` replacing all elements for which predicate
 * ``p`` returns ``true`` with ``new_value``.
 * @tparam ForwardIt1,ForwardIt2 must meet the requirements of ForwardIterator
 * @tparam UnaryPredicate must meet the requirements of Predicate
 * @param exec the execution policy to use
 * @param first,last the range of elements to copy
 * @param d_first the beginning of the destination range
 * @param p unary predicate which returns ``true`` if the element value should
 * be replaced
 * @param new_value the value to use as replacement
 * @return Iterator to the element past the last element copied.
 */
template <class ExecutionPolicy, class ForwardIt1, class ForwardIt2,
          class UnaryPredicate, class T>
ForwardIt2 replace_copy_if(ExecutionPolicy &&exec, ForwardIt1 first,
                           ForwardIt1 last, ForwardIt2 d_first,
                           UnaryPredicate p, const T &new_value) {
  return exec.replace_copy_if(first, last, d_first, p, new_value);
}

/** replace_copy
 * @brief Copies the all elements from the range ``[first, last)`` to another
 * range beginning at ``d_first`` replacing all elements that are equal to
 * ``old_value`` with ``new_value``.
 * @tparam ForwardIt1,ForwardIt2 must meet the requirements of ForwardIterator
 * @param exec the execution policy to use
 * @param first,last the range of elements to copy
 * @param d_first the beginning of the destination range
 * @param old_value the value of elements to replace
 * @param new_value the value to use as replacement
 * @return Iterator to the element past the last element copied.
 */
template <class ExecutionPolicy, class ForwardIt1, class ForwardIt2, class T>
ForwardIt2 replace_copy(ExecutionPolicy &&exec, ForwardIt1 first,
                        ForwardIt1 last, ForwardIt2 d_first, const T &old_value,
                        const T &new_value) {
  return exec.replace_copy(first, last, d_first, old_value, new_value);
}

/** all_of
 * @brief Checks if unary predicate ``p`` returns ``true`` for all elements in
 * the range ``[first, last)``.
 * @tparam ForwardIt must meet the requirements of ForwardIterator
 * @tparam UnaryPredicate must meet the requirements of Predicate
 * @param exec the execution policy to use
 * @param first,last the range of elements to examine
 * @return ``true`` if unary predicate returns ``true`` for all elements in the
 * range, ``false`` otherwise. Returns ``true`` if the range is empty.
 */
template <class ExecutionPolicy, class ForwardIt, class UnaryPredicate>
bool all_of(ExecutionPolicy &&exec, ForwardIt first, ForwardIt last,
            UnaryPredicate p) {
  return exec.all_of(first, last, p);
}

/** any_of
 * @brief Checks if unary predicate ``p`` returns ``true`` for at least one
 * element in the range ``[first, last)``.
 * @tparam ForwardIt must meet the requirements of ForwardIterator
 * @tparam UnaryPredicate must meet the requirements of Predicate
 * @param exec the execution policy to use
 * @param first,last the range of elements to examine
 * @param p unary predicate
 * @return ``true`` if unary predicate returns ``true`` for at least one element
 * in the range, ``false`` otherwise. Returns ``false`` if the range is empty.
 */
template <class ExecutionPolicy, class ForwardIt, class UnaryPredicate>
bool any_of(ExecutionPolicy &&exec, ForwardIt first, ForwardIt last,
            UnaryPredicate p) {
  return exec.any_of(first, last, p);
}

/** none_of
 * @brief Checks if unary predicate ``p`` returns ``true`` for no elements in
 * the range ``[first, last)``.
 * @tparam ForwardIt must meet the requirements of ForwardIterator
 * @tparam UnaryPredicate must meet the requirements of Predicate
 * @param exec the execution policy to use
 * @param first,last the range of elements to examine
 * @param p unary predicate
 * @return ``true`` if unary predicate returns ``true`` for no elements in the
 * range, ``false`` otherwise. Returns ``true`` if the range is empty.
 */
template <class ExecutionPolicy, class ForwardIt, class UnaryPredicate>
bool none_of(ExecutionPolicy &&exec, ForwardIt first, ForwardIt last,
             UnaryPredicate p) {
  return exec.none_of(first, last, p);
}

/** equal
 * @brief Returns ``true`` if the range ``[first1, last1)`` is equal to the
 * range ``[first2, first2 + (last1 - first1))``, and ``false`` otherwise. Uses
 * ``operator==`` to determine if two elements are equal.
 * @tparam ForwardIt1,ForwardIt2 must meet the requirements of ForwardIterator
 * @param exec the execution policy to use
 * @param first1,last1 the first range of the elements to compare
 * @param first2 the beginning of the second range of the elements to compare
 * @return If the elements in the two ranges are equal, returns ``true``.
 * Otherwise returns ``false``.
 */
template <class ExecutionPolicy, class ForwardIt1, class ForwardIt2>
bool equal(ExecutionPolicy &&exec, ForwardIt1 first1, ForwardIt1 last1,
           ForwardIt2 first2) {
  return exec.equal(first1, last1, first2);
}

/** equal
 * @brief Returns ``true`` if the range ``[first1, last1)`` is equal to the
 * range ``[first2, first2 + (last1 - first1))``, and ``false`` otherwise. Uses
 * the given binary predicate ``p`` to determine if two elements are equal.
 * @tparam ForwardIt1,ForwardIt2 must meet the requirements of ForwardIterator
 * @param exec the execution policy to use
 * @param first1,last1 the first range of the elements to compare
 * @param first2 the beginning of the second range of the elements to compare
 * @param p binary predicate which returns ``true`` if the elements should be
 * treated as equal
 * @return If the elements in the two ranges are equal, returns ``true``.
 * Otherwise returns ``false``.
 */
template <class ExecutionPolicy, class ForwardIt1, class ForwardIt2,
          class BinaryPredicate>
bool equal(ExecutionPolicy &&exec, ForwardIt1 first1, ForwardIt1 last1,
           ForwardIt2 first2, BinaryPredicate p) {
  return exec.equal(first1, last1, first2, p);
}

/** equal
 * @brief Returns ``true`` if the range ``[first1, last1)`` is equal to the
 * range ``[first2, last2)``, and ``false`` otherwise.  If the length of the
 * range ``[first1, last1)`` does not equal the length of the range ``[first2,
 * last2)``, returns ``false``. Uses ``operator==`` to determine if two elements
 * are equal.
 * @tparam ForwardIt1,ForwardIt2 must meet the requirements of ForwardIterator
 * @param exec the execution policy to use
 * @param first1,last1 the first range of the elements to compare
 * @param first2,last2 the second range of the elements to compare
 * @return If the length of the range ``[first1, last1)`` does not equal the
 * length of the range ``[first2, last2)``, returns ``false``. If the elements
 * in the two ranges are equal, returns ``true``. Otherwise returns ``false``.
 */
template <class ExecutionPolicy, class ForwardIt1, class ForwardIt2>
bool equal(ExecutionPolicy &&exec, ForwardIt1 first1, ForwardIt1 last1,
           ForwardIt2 first2, ForwardIt2 last2) {
  return exec.equal(first1, first2, last1, last2);
}

/** equal
 * @brief Returns ``true`` if the range ``[first1, last1)`` is equal to the
 * range ``[first2, last2)``, and ``false`` otherwise.  If the length of the
 * range ``[first1, last1)`` does not equal the length of the range ``[first2,
 * last2)``, returns ``false``. Uses
 * the given binary predicate ``p`` to determine if two elements are equal.
 * @tparam ForwardIt1,ForwardIt2 must meet the requirements of ForwardIterator
 * @param exec the execution policy to use
 * @param first1,last1 the first range of the elements to compare
 * @param first2,last2 the second range of the elements to compare
 * @param p binary predicate which returns ``true`` if the elements should be
 * treated as equal
 * @return If the length of the range ``[first1, last1)`` does not equal the
 * length of the range ``[first2, last2)``, returns ``false``. If the elements
 * in
 * the two ranges are equal, returns ``true``. Otherwise returns ``false``.
 */
template <class ExecutionPolicy, class ForwardIt1, class ForwardIt2,
          class BinaryPredicate>
bool equal(ExecutionPolicy &&exec, ForwardIt1 first1, ForwardIt1 last1,
           ForwardIt2 first2, ForwardIt2 last2, BinaryPredicate p) {
  return exec.equal(first1, last1, first2, last2, p);
}

/** mismatch
 * @brief Returns the first mismatching pair of elements from two ranges: one
 * defined by ``[first1, last1)`` and another defined by ``[first2, first2 +
 * (last1 - first1))``.
 * Elements are compared using ``operator==``.
 * @tparam ForwardIt1,ForwardIt2 must meet the requirements of ForwardIterator
 * @param exec the execution policy to use
 * @param first1,last1 the first range of the elements
 * @param first2 the beginning of the second range of the elements
 * @return ``std::pair`` with iterators to the first two non-equivalent elements
 */
template <class ExecutionPolicy, class ForwardIt1, class ForwardIt2>
std::pair<ForwardIt1, ForwardIt2> mismatch(ExecutionPolicy &&exec,
                                           ForwardIt1 first1, ForwardIt1 last1,
                                           ForwardIt2 first2) {
  return exec.mismatch(first1, last1, first2);
}

/** mismatch
 * @brief Returns the first mismatching pair of elements from two ranges: one
 * defined by ``[first1, last1)`` and another defined by ``[first2, first2 +
 * (last1 - first1))``.
 * Elements are compared using the given binary predicate ``p``.
 * @tparam ForwardIt1,ForwardIt2 must meet the requirements of ForwardIterator
 * @tparam BinaryPredicate must meet the requirements of BinaryPredicate
 * @param exec the execution policy to use
 * @param first1,last1 the first range of the elements
 * @param first2 the beginning of the second range of the elements
 * @param p binary predicate which returns ``true`` if the elements should be
 * treated as equal
 * @return ``std::pair`` with iterators to the first two non-equivalent elements
 */
template <class ExecutionPolicy, class ForwardIt1, class ForwardIt2,
          class BinaryPredicate>
std::pair<ForwardIt1, ForwardIt2> mismatch(ExecutionPolicy &&exec,
                                           ForwardIt1 first1, ForwardIt1 last1,
                                           ForwardIt2 first2,
                                           BinaryPredicate p) {
  return exec.mismatch(first1, last1, first2, p);
}

/** mismatch
 * @brief Returns the first mismatching pair of elements from two ranges: one
 * defined by ``[first1, last1)`` and another defined by ``[first2,last2)``.
 * Elements are compared using ``operator==``.
 * @tparam ForwardIt1,ForwardIt2 must meet the requirements of ForwardIterator
 * @param exec the execution policy to use
 * @param first1,last1 the first range of the elements
 * @param first2,last2 the second range of the elements
 * @return ``std::pair`` with iterators to the first two non-equivalent
 * elements. If no
 * mismatches are found when the comparison reaches ``last1`` or ``last2``,
 * whichever happens first, the pair holds the end iterator and the
 * corresponding iterator from the other range.
 */
template <class ExecutionPolicy, class ForwardIt1, class ForwardIt2>
std::pair<ForwardIt1, ForwardIt2> mismatch(ExecutionPolicy &&exec,
                                           ForwardIt1 first1, ForwardIt1 last1,
                                           ForwardIt2 first2,
                                           ForwardIt2 last2) {
  return exec.mismatch(first1, last1, first2, last2);
}

/** mismatch
 * @brief Returns the first mismatching pair of elements from two ranges: one
 * defined by ``[first1, last1)`` and another defined by ``[first2,last2)``.
 * Elements are compared using the given binary predicate ``p``.
 * @tparam ForwardIt1,ForwardIt2 must meet the requirements of ForwardIterator
 * @tparam BinaryPredicate must meet the requirements of BinaryPredicate
 * @param exec the execution policy to use
 * @param first1,last1 the first range of the elements
 * @param first2,last2 the second range of the elements
 * @param p binary predicate which returns ``true`` if the elements should be
 * treated as equal
 * @return ``std::pair`` with iterators to the first two non-equivalent
 * elements.
 * If no
 * mismatches are found when the comparison reaches ``last1`` or ``last2``,
 * whichever happens first, the pair holds the end iterator and the
 * corresponding iterator from the other range.
 */
template <class ExecutionPolicy, class ForwardIt1, class ForwardIt2,
          class BinaryPredicate>
std::pair<ForwardIt1, ForwardIt2> mismatch(ExecutionPolicy &&exec,
                                           ForwardIt1 first1, ForwardIt1 last1,
                                           ForwardIt2 first2, ForwardIt2 last2,
                                           BinaryPredicate p) {
  return exec.mismatch(first1, last1, first2, last2, p);
}

}  // namespace parallel
}  // namespace experimental
}  // namespace std

#endif  // __EXPERIMENTAL_PARALLEL_ALGORITHM__
