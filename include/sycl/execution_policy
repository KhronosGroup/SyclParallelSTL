/* Copyright (c) 2015 The Khronos Group Inc.

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and/or associated documentation files (the
  "Materials"), to deal in the Materials without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Materials, and to
  permit persons to whom the Materials are furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be included
  in all copies or substantial portions of the Materials.

  MODIFICATIONS TO THIS FILE MAY MEAN IT NO LONGER ACCURATELY REFLECTS
  KHRONOS STANDARDS. THE UNMODIFIED, NORMATIVE VERSIONS OF KHRONOS
  SPECIFICATIONS AND HEADER INFORMATION ARE LOCATED AT
     https://www.khronos.org/registry/

  THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
*/

#ifndef __SYCL_EXECUTION_POLICY__
#define __SYCL_EXECUTION_POLICY__

#include <type_traits>
#include <typeinfo>
#include <memory>

// Workaround for travis builds,
// disable old C99 macros
#undef isfinite
#undef isnan
#undef isnormal
#undef isinf
#undef signbit
#undef isgreater
#undef isless
#undef islessequal
#undef isunordered
#undef isgreaterequal

#include <CL/sycl.hpp>
#include <sycl/algorithm/for_each.hpp>
#include <sycl/algorithm/for_each_n.hpp>
#include <sycl/algorithm/sort.hpp>
#include <sycl/algorithm/transform.hpp>
#include <sycl/algorithm/inner_product.hpp>
#include <sycl/algorithm/reduce.hpp>
#include <sycl/algorithm/transform_reduce.hpp>
#include <sycl/algorithm/count_if.hpp>
#include <sycl/algorithm/exclusive_scan.hpp>
#include <sycl/algorithm/inclusive_scan.hpp>
#include <sycl/algorithm/find.hpp>
#include <sycl/algorithm/fill.hpp>

namespace sycl {

/** DefaultKernelName
* Empty type uses when a kernel name is not required
*  for generating the kernel of the algorithm
*/
struct DefaultKernelName {};

/* sycl_execution_policy.
* The sycl_execution_policy enables algorithms to be executed using
*  a SYCL implementation.
*/
template <class KernelName = DefaultKernelName>
class sycl_execution_policy {
  cl::sycl::queue m_q;

 public:
  // The kernel name when using lambdas
  using kernelName = KernelName;

  sycl_execution_policy() = default;

  sycl_execution_policy(cl::sycl::queue q) : m_q(q){};

  sycl_execution_policy(const sycl_execution_policy&) = default;

  // Returns the name of the kernel as a string
  std::string get_name() const { return typeid(kernelName).name(); };

  // Returns the queue, if any
  cl::sycl::queue get_queue() const { return m_q; }

  /* Calculate GlobalSize.
  * @brief Calculates a divisible global size
  * @param global : The problem size
  * @param local  : The local size
  */
  int calculateGlobalSize(int global, int local) {
    size_t newGlobal = 0;

    if (global % local == 0) {
      newGlobal = global;
    } else {
      newGlobal = global / local;
      newGlobal = (newGlobal + 1) * local;
    }

    return newGlobal;
  }

  /** reduce
   * @brief Function that sorts the given range
   * @param exec  : Execution Policy
   * @param first : Start of the range
   * @param last  : End of the range
   */
  template <class InputIterator>
  typename std::iterator_traits<InputIterator>::value_type reduce(
      InputIterator first, InputIterator last) {
    typedef typename std::iterator_traits<InputIterator>::value_type type_;
    return sycl::impl::reduce(*this, first, last, type_(0),
                              [=](type_ v1, type_ v2) { return v1 + v2; });
  }

  /** reduce
   * @brief Function that sorts the given range
   * @param exec  : Execution Policy
   * @param first : Start of the range
   * @param last  : End of the range
   * @param init  : Initial value
   */
  template <class InputIterator, class T>
  T reduce(InputIterator first, InputIterator last, T init) {
    return sycl::impl::reduce(*this, first, last, init,
                              [=](T v1, T v2) { return v1 + v2; });
  }

  /** reduce
   * @brief Function that sorts the given range
   * @param exec   : Execution Policy
   * @param first  : Start of the range
   * @param last   : End of the range
   * @param init   : Initial value
   * @param binop  : Binary operator
   */
  template <class InputIterator, class T, class BinaryOperation>
  T reduce(InputIterator first, InputIterator last, T init,
           BinaryOperation binop) {
    return sycl::impl::reduce(*this, first, last, init, binop);
  }

  /** sort
   * @brief Function that sorts the given range
   * @param first : Start of the range
   * @param last  : End of the range
   */
  template <class RandomAccessIterator>
  inline void sort(RandomAccessIterator b, RandomAccessIterator e) {
    cl::sycl::queue q(get_queue());
    typedef
        typename std::iterator_traits<RandomAccessIterator>::value_type type_;
    auto buf = std::move(sycl::helpers::make_buffer(b, e));
    auto vectorSize = buf.get_count();

    if (impl::isPowerOfTwo(vectorSize)) {
      sycl::impl::bitonic_sort<type_>(q, buf, vectorSize);
    } else {
      sycl::impl::sequential_sort<type_>(q, buf, vectorSize);
    }
  }

  /** sort
   * @brief Function that takes a Comp Operator and applies it to the given
   * range
   * @param first : Start of the range
   * @param last  : End of the range
   * @param comp  : Comp Operator
   */
  template <class RandomIt, class Compare>
  void sort(RandomIt first, RandomIt last, Compare comp) {
    auto named_sep = getNamedPolicy(*this, comp);
    impl::sort(named_sep, first, last, comp);
  }

  /* transform.
  * @brief Applies an Unary Operator across the range [b, e).
  * Implementation of the command group that submits a transform kernel,
  * According to Parallelism TS
  */
  template <class Iterator, class OutputIterator, class UnaryOperation>
  OutputIterator transform(Iterator b, Iterator e, OutputIterator out_b,
                           UnaryOperation op) {
    auto named_sep = getNamedPolicy(*this, op);
    return impl::transform(named_sep, b, e, out_b, op);
  }

  /* transform.
  * @brief Applies a Binary Operator across the range [first1, last1).
  * Implementation of the command group that submits a transform kernel,
  * According to Parallelism TS
  */
  template <class InputIt1, class InputIt2, class OutputIt,
            class BinaryOperation>
  OutputIt transform(InputIt1 first1, InputIt1 last1, InputIt2 first2,
                     OutputIt result, BinaryOperation binary_op) {
    return impl::transform(*this, first1, last1, first2, result, binary_op);
  }

  /* for_each
   */
  template <class Iterator, class UnaryFunction>
  void for_each(Iterator b, Iterator e, UnaryFunction f) {
    impl::for_each(*this, b, e, f);
  }

  /* for_each_n.
  * @brief Applies a Function across the range [first, first + n).
  * Implementation of the command group that submits a for_each_n kernel,
  * According to Parallelism TS version n4507. Section 4.3.2
  */
  template <class InputIterator, class Size, class Function>
  InputIterator for_each_n(InputIterator first, Size n, Function f) {
    return impl::for_each_n(*this, first, n, f);
  }

  /* inner_product.
  * @brief Returns the inner product of two vectors across the range [first1,
  * last1) by applying Functions op1 and op2. Implementation of the command
  * group
  * that submits an inner_product kernel.
  */
  template <class InputIt1, class InputIt2, class T,
            class BinaryOperation1 = decltype(std::plus<T>()), class BinaryOperation2 = decltype(std::multiplies<T>())>
  T inner_product(InputIt1 first1, InputIt1 last1, InputIt2 first2, T value,
                  BinaryOperation1 op1 = std::plus<T>(), BinaryOperation2 op2 = std::multiplies<T>()) {
    auto vectorSize = std::distance(first1, last1);
    if (impl::isPowerOfTwo(vectorSize)) {
      return impl::inner_product(*this, first1, last1, first2, value, op1, op2);
    } else {
      return impl::inner_product_sequential(*this, first1, last1, first2, value,
                                            op1, op2);
    }
  }

  /* transform_reduce.
  * @brief Returns the transform_reduce of one vector across the range [first1,
  * last1) by applying Functions op1 and op2. Implementation of the command
  * group
  * that submits a transform_reduce kernel.
  */
  template <class InputIterator, class UnaryOperation, class T,
            class BinaryOperation>
  T transform_reduce(InputIterator first, InputIterator last,
                     UnaryOperation unary_op, T init,
                     BinaryOperation binary_op) {
    return impl::transform_reduce(*this, first, last, unary_op, init,
                                  binary_op);
  }

  /* count_if.
  * @brief Returns the count_if of one vector across the range [first,
  * last) by applying UnaryPredicate p. Implementation of the command group
  * that submits a count_if kernel.
  */
  template <class InputIt, class UnaryPredicate>
  typename std::iterator_traits<InputIt>::difference_type count_if(
      InputIt first, InputIt last, UnaryPredicate p) {
    typedef typename std::iterator_traits<InputIt>::value_type type_;
    return impl::count_if(*this, first, last, p,
                          [=](type_ v1, type_ v2) { return v1 + v2; });
  }

  /** exclusive_scan.
  * @brief Returns the exclusive scan (prefix sum) of the vector across the
  * range [First, last) plus the initial value T init. Implementation
  * of the command group that submits an exclusive_scan kernel.
  */
  template <class InputIterator, class OutputIterator, class T>
  OutputIterator exclusive_scan(InputIterator first, InputIterator last,
                                OutputIterator output, T init) {
    // get the type from the iterator to build a default addition lambda
    typedef typename std::iterator_traits<InputIterator>::value_type type_;
    return impl::exclusive_scan(*this, first, last, output, init,
                                [=](type_ v1, type_ v2) { return v1 + v2; });
  }

  /** exclusive_scan.
  * @brief Returns the exclusive scan (prefix sum) of the vector across the
  * range [First, last) plus the initial value T init by applying the binary
  * operation binary_op. Implementation of the command group that submits an
  * exclusive_scan kernel.
  */
  template <class InputIterator, class OutputIterator, class T,
            class BinaryOperation>
  OutputIterator exclusive_scan(InputIterator first, InputIterator last,
                                OutputIterator output, T init,
                                BinaryOperation binary_op) {
    return impl::exclusive_scan(*this, first, last, output, init, binary_op);
  }

  /** inclusive_scan.
  * @brief Returns the inclusive scan (prefix sum) of the vector across the
  * range [First, last) by applying a default addition. Implementation
  * of the command group that submits an inclusive_scan kernel.
  */
  template <class InputIterator, class OutputIterator>
  OutputIterator inclusive_scan(InputIterator first, InputIterator last,
                                OutputIterator d_first) {
    typedef typename std::iterator_traits<InputIterator>::value_type type_;
    return impl::inclusive_scan(*this, first, last, d_first, 0,
                                [=](type_ v1, type_ v2) { return v1 + v2; });
  }

  /** inclusive_scan.
  * @brief Returns the inclusive scan (prefix sum) of the vector across the
  * range [First, last) by applying the BinaryOperation binary_op.
  * Implementation
  * of the command group that submits an inclusive_scan kernel.
  */
  template <class InputIterator, class OutputIterator, class BinaryOperation>
  OutputIterator inclusive_scan(InputIterator first, InputIterator last,
                                OutputIterator d_first,
                                BinaryOperation binary_op) {
    return impl::inclusive_scan(*this, first, last, d_first, 0, binary_op);
  }

  /* inclusive_scan.
  * @brief Returns the inclusive scan (prefix sum) of the vector across the
  * range [First, last) and an initial value init, of type T, by applying the
  * BinaryOperation binary_op.
  * Implementation of the command group that submits an inclusive_scan kernel.
  */
  template <class InputIterator, class OutputIterator, class BinaryOperation,
            class T>
  OutputIterator inclusive_scan(InputIterator first, InputIterator last,
                                OutputIterator d_first,
                                BinaryOperation binary_op, T init) {
    return impl::inclusive_scan(*this, first, last, d_first, init, binary_op);
  }

  /** find
  * @brief Returns an iterator to the first position at which value can be found
  * in the range [first, last)
  */
  template <class InputIt, class T>
  InputIt find(InputIt first, InputIt last, T value) {
    return impl::find_impl(*this, first, last,
                           [=](T other) { return value == other; });
  }

  /** find_if
  * @brief Returns an iterator to the first position at which the predicate P
  * is true in the range [first, last)
  */
  template <class InputIt, class UnaryPredicate>
  InputIt find_if(InputIt first, InputIt last, UnaryPredicate P) {
    return impl::find_impl(*this, first, last, P);
  }

  /** find_if_not
  * @brief Returns an iterator to the first position at which the predicate P
  * is false in the range [first, last)
  */
  template <class InputIt, class UnaryPredicate>
  InputIt find_if_not(InputIt first, InputIt last, UnaryPredicate P) {
    typedef typename std::iterator_traits<InputIt>::value_type type_;
    return impl::find_impl(*this, first, last,
                           [=](type_ other) { return !P(other); });
  }

  /** fill
  * @brief Fills container described by the ForwardIt iterators first, last
  * with the value given in "T value". Implementation of the command group that
  * submits a fill kernel
  */
  template <class ForwardIt, class T>
  void fill(ForwardIt first, ForwardIt last, const T& value) {
    return impl::fill(*this, first, last, value);
  }
};

/** getNamedPolicy.
 * If the user is using a Functor and not specifying a name, we assume it is a
 * functor and therefore
 * we can use it as a name for a kernel.
 */
template <typename ExecutionPolicy,
          typename std::enable_if<
              std::is_same<typename ExecutionPolicy::kernelName,
                           DefaultKernelName>::value>::type* = nullptr,
          typename FunctorT>
sycl_execution_policy<FunctorT> getNamedPolicy(ExecutionPolicy& ep,
                                               FunctorT func) {
  sycl_execution_policy<FunctorT> sep;
  return sep;
}

/** getNamedPolicy.
 * If the user is using a Lambda then it must specify a name to use for the
 * kernel.
 */
template <typename ExecutionPolicy,
          typename Name = typename ExecutionPolicy::kernelName,
          typename std::enable_if<
              !std::is_same<Name, DefaultKernelName>::value>::type* = nullptr,
          typename FunctorT>
ExecutionPolicy getNamedPolicy(ExecutionPolicy& ep, FunctorT func) {
  return ep;
}

}  // sycl

#endif  // __SYCL_EXECUTION_POLICY__
